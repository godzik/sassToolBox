@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
  -moz-box-sizing: $box-model;
  box-sizing: $box-model;
}

@mixin fluid() {
  position: relative;
  width: 90%;
  margin: 0 auto;
  @include min(lg) {
    width: 100%;
    max-width: $bWidth;
  }
}

@mixin fontfix() {
    -webkit-font-smoothing: antialiased;
    -webkit-text-stroke: 1px transparent;
    text-shadow: rgba(0, 0, 0, .01) 0 0 1px;
}

@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin line-height($heightValue: 12 ){
  line-height: $heightValue + px;
  line-height: (0.125 * $heightValue) + rem;
}

@mixin box-shadow($args...) {
  -webkit-box-shadow: $args;
  -moz-box-shadow: $args;
  -ms-box-shadow: $args;
  -o-box-shadow: $args;
  box-shadow: $args;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform($args...) {
  -webkit-transform: translate($args);
  -moz-transform: translate($args);
  -ms-transform: translate($args);
  -o-transform: translate($args);
  transform: translate($args);
}

@mixin transformX($args...) {
  -webkit-transform: translateX($args);
  -moz-transform: translateX($args);
  -ms-transform: translateX($args);
  -o-transform: translateX($args);
  transform: translateX($args);
}

@mixin transformY($args...) {
  -webkit-transform: translateY($args);
  -moz-transform: translateY($args);
  -ms-transform: translateY($args);
  -o-transform: translateY($args);
  transform: translateY($args);
}

@mixin max($point) {
  @media (max-width: $point) { @content; }
}

@mixin min($point) {
  @if $point == xs {
    @media (min-width: 480px) { @content; }
  }
  @else if $point == xm {
    @media (min-width: 620px) { @content; }
  }
  @else if $point == sm {
    @media (min-width: 768px) { @content; }
  }
  @else if $point == md {
    @media (min-width: 992px) { @content; }
  }
  @else if $point == lg {
    @media (min-width: 1200px)  { @content; }
  }
  @else if $point == xl {
    @media (min-width: 1400px)  { @content; }
  }
  @else if $point == xxl {
    @media (min-width: 1600px)  { @content; }
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;
}
@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin arrow($direction, $size, $color) {
  width: 0;
  height: 0;
  @if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color; 
  }
  @else if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
  @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
  @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right:$size solid $color;
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}